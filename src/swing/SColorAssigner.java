package swing;


import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.AbstractAction;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JDialog;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

import utility.PersonalizedIcon;
import utility.Utility;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.util.LinkedList;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import swing.slyumCustomizedComponents.SToolBarButton;

/**
 * Show a dialog for choosing a color.
 * 
 * @author David Miserez
 * @version 1.0 - 25.07.2011
 */
public class SColorAssigner extends JDialog {
  private static final long serialVersionUID = -1975479020681307211L;
  private static JColorChooser colorChooser = new JColorChooser();
  private static RecentColorManager recentColorManager = new RecentColorManager();
  public static JMenu createMenuRecentColor() {
    return recentColorManager.createMenuRecentColor();
  }
  
  public static RecentColorButton[] createButtonsRecentColor() {
    return recentColorManager.createButtonsRecentColor();
  }
  
  private final JPanel contentPanel = new JPanel();
  private boolean accepted = false;
  private boolean defaultColor = false;
  
  /**
   * Create the dialog.
   */
  public SColorAssigner() {
    
    // Generated by WindowBuilder from Google.
    Utility.setRootPaneActionOnEsc(getRootPane(), new AbstractAction() {
      private static final long serialVersionUID = -9137055482704631902L;

      @Override
      public void actionPerformed(ActionEvent e) {
        setVisible(false);
      }
    });

    setModalityType(ModalityType.APPLICATION_MODAL);
    setResizable(false);
    setTitle("Slyum - Choose a color...");
    setIconImage(PersonalizedIcon.getLogo().getImage());
    setBounds(100, 100, 635, 421);
    setLocationRelativeTo(Slyum.getInstance());
    getContentPane().setLayout(new BorderLayout());
    contentPanel.setLayout(new FlowLayout());
    contentPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
    getContentPane().add(contentPanel, BorderLayout.CENTER);
    {
      contentPanel.add(colorChooser);
    }
    {
      final JPanel buttonPane = new JPanel();
      buttonPane.setLayout(new BoxLayout(buttonPane, BoxLayout.LINE_AXIS));
      buttonPane.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
      getContentPane().add(buttonPane, BorderLayout.SOUTH);

      {
        final JButton defaultButton = new JButton("Default");
        defaultButton.setActionCommand("default color");
        defaultButton.addActionListener(new ActionListener() {

          @Override
          public void actionPerformed(ActionEvent e) {
            accepted = true;
            defaultColor = true;
            setVisible(false);
          }
        });
        buttonPane.add(defaultButton);
        buttonPane.add(Box.createHorizontalGlue());
      }
      {
        final JButton okButton = new JButton("Ok");
        okButton.addActionListener(new ActionListener() {

          @Override
          public void actionPerformed(ActionEvent e) {
            accepted = true;
            defaultColor = false;
            recentColorManager.addColor(colorChooser.getColor());
            setVisible(false);
          }
        });
        okButton.setActionCommand("OK");
        buttonPane.add(okButton);

        getRootPane().setDefaultButton(okButton);
        buttonPane.add(Box.createHorizontalStrut(10));
      }
      {
        final JButton cancelButton = new JButton("Cancel");
        cancelButton.addActionListener(new ActionListener() {

          @Override
          public void actionPerformed(ActionEvent e) {
            accepted = false;
            setVisible(false);
          }
        });
        cancelButton.setActionCommand("Cancel");
        buttonPane.add(cancelButton);
      }
    }

    setVisible(true);
  }

  public boolean isAccepted() {
    return accepted;
  }

  public boolean isDefaultColor() {
    return defaultColor;
  }
  
  public Color getColor() {
    return colorChooser.getColor();
  }
  
  public static class RecentColorManager {
    
    private LinkedList<JMenu> menus = new LinkedList<>();
    private LinkedList<RecentColorButton[]> buttons = new LinkedList<>();
    private Color[] recentColors = new Color[3];

    private void addColor(Color color) {
      updateArrayColor(color);
      notifyComponents();
    }
    
    private void updateArrayColor(Color color) {
      if (!appendColor(color)) {
        final int LAST_INDEX = recentColors.length - 1;
        moveColor(LAST_INDEX);
        recentColors[LAST_INDEX] = color;
      }
    }
    
    private boolean appendColor(Color color) {
      int i = getLastColorIndex();
      
      if (i < recentColors.length) {
        recentColors[i] = color;
        return true;
      } else {
        return false;
      }
    }
    
    private int getLastColorIndex() {
      int i = 0;
      while (i < recentColors.length && recentColors[i] != null) ++i;
      return i;
    }
    
    private void moveColor(int index) {
      if (index == 0)
        return;
      moveColor(index-1);
      recentColors[index-1] = recentColors[index];
    }
    
    private void notifyComponents() {
      for (JMenu menu : menus)
        notifyMenu(menu);
      
      for (RecentColorButton[] btns : buttons)
        notifyButtons(btns);
    }
    
    private void notifyButtons(RecentColorButton[] buttons) {
      int lastIndex = getLastColorIndex();
      for (int i = 0; i < lastIndex; i++) {
        buttons[i].setVisible(true);
        buttons[i].setColor(recentColors[i]);
      }
    }
    
    private void notifyMenu(JMenu menu) {
      int lastIndex = getLastColorIndex();
      for (int i = 0; i < lastIndex; i++) {
        JMenuItem menuColor = menu.getItem(i);
        menuColor.setVisible(true);
        menuColor.setBackground(recentColors[i]);
      }
    }
    
    private JMenu createMenuRecentColor() {
      JMenu menuRecentColor = new JMenu("Recent Color");
      menus.add(menuRecentColor);
      return menuRecentColor;
    }

    private RecentColorButton[] createButtonsRecentColor() {
      RecentColorButton[] btnsRecentColor = new RecentColorButton[3];
      buttons.add(btnsRecentColor);
      
      for (int i = 0; i < btnsRecentColor.length; i++)
        btnsRecentColor[i] = new RecentColorButton();
      
      return btnsRecentColor;
    } 
  }
  
  public static class RecentColorButton extends SToolBarButton {

    private Color color;
    
    public RecentColorButton() {
      setVisible(false);
    }

    public Color getColor() {
      return color;
    }

    public void setColor(Color color) {
      this.color = color;
      repaint();
    }

    @Override
    protected void paintComponent(Graphics g) {
      super.paintComponent(g);
      Utility.setRenderQuality(g);      
      
      final int size = 10;
      Point location = 
          new Point((getWidth() - size) / 2, (getHeight() - size ) / 2);
      Color paintColor = color;
      
      if (!isEnabled())
        paintColor = Slyum.DISABLE_COLOR;
      
      Graphics2D g2 = (Graphics2D)g;
      g2.setColor(paintColor);
      g2.fillRect(location.x, location.y, size, size);
      
      g2.setColor(paintColor.darker());
      g2.drawRect(location.x, location.y, size, size);
    }    
  }
}
